# the weight of being picked when a new battle occurs on a Front
# root = commander
# is_advancing_side = whether this side is the one advancing or not (defending = no)
front_commander_pick_weight = {
	# Start with the amount of own troops, not in battle,
	# multiplied by 10 to give it more weight.
	value = root.num_units_not_in_battle
	multiply = 10
	if = {
		limit = {
			scope:is_advancing_side = no
		}
		# Orders
		if = {
			limit = {
				has_commander_order = defend_entrench
			}
			multiply = 2
		}
		else_if = {
			limit = {
				OR = {
					has_commander_order = defend_delaying_tactics
					has_commander_order = defend_organized
				}
			}
			multiply = 1.75
		}
		else_if = {
			limit = {
				has_commander_order = defend_fortified
			}
			multiply = 1.5
		}
		else_if = {
			limit = {
				has_commander_order = defend_counter_attack
			}
			multiply = 1.25
		}
		else_if = {
			limit = {
				has_commander_order = defend
			}
			multiply = 1.1
		}
		# Traits
		if = {
			limit = {
				has_trait = expert_defensive_strategist
				has_trait = trench_rat
			}
			multiply = 2
		}
		else_if = {
			limit = {
				has_trait = experienced_defensive_strategist
				has_trait = defense_in_depth_specialist
			}
			multiply = 1.5
		}
		else_if = {
			limit = {
				OR = {
					has_trait = basic_defensive_strategist
					has_trait = stalwart_defender
				}
			}
			multiply = 1.25
		}
		else_if = {
			limit = {
				has_trait = mountain_commander
				has_trait = forest_commander
				has_trait = surveyor
				has_trait = resupply_commander
				has_trait = logistics_expert
				has_trait = pillager
			}
			multiply = 1.1
		}
	}
	else = {
		# Orders
		if = {
			limit = {
				OR = {
					has_commander_order = advance_organized
					has_commander_order = advance_rapid
					has_commander_order = advance_heavy
				}
			}
			multiply = 2
		}
		else_if = {
			limit = {
				has_commander_order = advance_planned
			}
			multiply = 1.5
		}
		else_if = {
			limit = {
				has_commander_order = advance_reckless
			}
			multiply = 1.25
		}
		else_if = {
			limit = {
				has_commander_order = advance
			}
			multiply = 1.1
		}
		# Traits
		if = {
			limit = {
				has_trait = expert_offensive_planner
				has_trait = expert_cavalry_commander
				has_trait = expert_artillery_commander
			}
			multiply = 2
		}
		else_if = {
			limit = {
				has_trait = experienced_offensive_planner
				has_trait = experienced_cavalry_commander
				has_trait = experienced_artillery_commander
			}
			multiply = 1.5
		}
		else_if = {
			limit = {
				has_trait = basic_offensive_planner
				has_trait = basic_cavalry_commander
				has_trait = basic_artillery_commander
			}
			multiply = 1.25
		}
		else_if = {
			limit = {
				has_trait = plains_commander
				has_trait = surveyor
				has_trait = resupply_commander
				has_trait = logistics_expert
				has_trait = pillager
			}
			multiply = 1.1
		}
	}
	# Commanders shouldn't be picked for multiple battles
	if = {
		limit = {
			is_in_battle = yes
		}
		multiply = 0
	}
}

# the troop distribution weight of a Front for a country/commander
# root = country
# front = the front to calculate troop weight for
# character = the country commander (if any; could be garrison)
front_country_troop_weight = {
	value = "scope:front.num_enemy_units(root)"
}

# root = state
# front = the front this battle will happen on
# own_commander = the commander leading this side in battle (if any; could be garrison)
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
# is_strategic_objective = indicates whether the root state lies in the Front Strategic Objective
# distance_to_strategic_objective = *squared* distance to this front active Strategic Objective, if any (use `exists` to check). Always > 0.0 when it exists.
# distance_to_closest_war_goal = *squared* distance to this front closest War Goal, if any (use `exists` to check). Always > 0.0 when it exists.
# if the console variable `debug_front_battle_weight` is enabled, data will be logged to std::cout.
front_battle_state_weight = {
	value = 100000
	if = {
		limit = {
			scope:is_strategic_objective = yes
		}
		add = 100
	}
	else = {
		subtract = 100
	}
	if = {
		limit = {
			exists = scope:distance_to_strategic_objective
		}
		divide = scope:distance_to_strategic_objective
	}
	else_if = {
		limit = {
			exists = scope:distance_to_closest_war_goal
		}
		divide = scope:distance_to_closest_war_goal
	}
}

# root = province
# front = the front this battle will happen on
# own_commander = the commander leading this side in battle (if any; could be garrison)
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
# is_strategic_objective = indicates whether the root province lies in the Front Strategic Objective
# distance_to_strategic_objective = *squared* distance to this front active Strategic Objective, if any (use `exists` to check). Always > 0.0 when it exists.
# distance_to_closest_war_goal = *squared* distance to this front closest War Goal, if any (use `exists` to check). Always > 0.0 when it exists.
# if the console variable `debug_front_battle_weight` is enabled, data will be logged to std::cout.
front_battle_province_weight = {
	value = 100000
	if = {
		limit = {
			exists = scope:distance_to_strategic_objective
		}
		divide = scope:distance_to_strategic_objective
	}
	else_if = {
		limit = {
			exists = scope:distance_to_closest_war_goal
		}
		divide = scope:distance_to_closest_war_goal
	}
}

province_terrain_infrastructure_force_limit = {
	value = 5
	add = {
		value = scope:province.state.infrastructure
		divide = 3
	}
	multiply = scope:province.combat_width
}

# the battalion size for each side in a land battle
# root = a country on the side being evaluated (this general's country, or this theater side owner if none)
# enemy_country = a country on the opposing side (the other general's country, or that theater side owner if none)
# front = the front to calculate troop weight for (if any; not during Naval Invasions)
# own_commander = the commander leading this side in battle (if any; could be garrison)
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
# is_advancing_side = whether this side is the one advancing or not (defending = no)
# is_naval_invasion = if the battle is a naval landing battle
# province = the province where the battle is happening
land_battle_size = {
	# Start with a baseline number of battalions equal to the amount of allied troops on the front
	if = {
		# For all regular land battles
		limit = {
			scope:is_naval_invasion = no
		}
		value = {
			value = "scope:front.num_total_battalions(root)"
			desc = "BATTLE_SIZE_BASE_TOTAL_BATTALIONS_ON_FRONT"
		}
	}
	else_if = {
		limit = {
			scope:is_naval_invasion = yes
		}
		if = {
			limit = {
				scope:is_advancing_side = yes
			}
			value = {
				value = "scope:own_commander.num_mobilized_battalions"
				desc = "BATTLE_SIZE_BASE_NAVAL_INVASION_GENERALS_BATTALIONS"
			}
		}
		else_if = {
			limit = {
				scope:is_advancing_side = no
			}
			value = {
				value = "scope:province.land_controller_hq.num_garrison_units"
				desc = "BATTLE_SIZE_BASE_NAVAL_INVASION_GARRISONED_BATTALIONS"
			}
		}
	}
	# For regular land battles, subtract a random number of battalions depending on how many battalions are on the front compared to how long it is
	if = {
		limit = {
			exists = scope:front
		}
		subtract = {
			fixed_range = {
				min = 0
				max = {
					add = "scope:front.num_total_battalions(root)"
					subtract = {
						add = "scope:front.num_total_battalions(root)"
						divide = "scope:front.front_length"
					}
					divide = 2
				}
			}
			floor = yes
			desc = "BATTLE_SIZE_CONCENTRATION_ACROSS_LENGTH_OF_FRONT"
		}
	}
	save_temporary_value_as = pre_combat_width_cap
	# Cap to infrastructure-based combat width
	if = {
		limit = {
			scope:pre_combat_width_cap > province_terrain_infrastructure_force_limit
		}
		max = {
			value = province_terrain_infrastructure_force_limit
			ceiling = yes
			desc = "BATTLE_SIZE_TERRAIN_INFRASTRUCTRE"
		}
	}
	save_temporary_value_as = pre_numeric_advantage
	# In a regular land battle, if we have a general and outnumber the enemy we may be able to bring additional troops
	if = {
		limit = {
			scope:is_naval_invasion = no
			exists = scope:own_commander
			exists = scope:front
			"scope:front.num_total_battalions(root)" > "scope:front.num_total_battalions(scope:enemy_country)"
			"scope:front.num_total_battalions(scope:enemy_country)" > 0
		}
		value = {
			add = scope:pre_numeric_advantage
			multiply = {
				fixed_range = {
					min = 1
					max = {
						add = "scope:front.num_total_battalions(root)"
						divide = "scope:front.num_total_battalions(scope:enemy_country)"
						subtract = 1
						multiply = 1.5
						add = 1
						max = 3
					}
				}
			}
			ceiling = yes
			desc = "BATTLE_SIZE_NUMERIC_ADVANTAGE"
		}
	}
	save_temporary_value_as = pre_max_amount_cap
	# Cap to *actually available* troops
	if = {
		limit = {
			scope:is_naval_invasion = no
		}
		if = {
			limit = {
				scope:is_military_formation = no				# ignore this rule for miitary formation battles for now
				scope:is_advancing_side = yes
				scope:pre_max_amount_cap > {
					add = "scope:front.num_total_battalions(root)"
					subtract = "scope:front.num_defending_battalions(root)"
				}
			}
			max = {
				add = "scope:front.num_total_battalions(root)"
				subtract = "scope:front.num_defending_battalions(root)"
				desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
			}
		}
		else_if = {
			limit = {
				scope:is_advancing_side = no
				scope:pre_max_amount_cap > "scope:front.num_total_battalions(root)"
			}
			max = {
				add = "scope:front.num_total_battalions(root)"
				desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
			}
		}
	}
	else_if = {
		limit = {
			scope:is_naval_invasion = yes
		}
		if = {
			limit = {
				scope:is_advancing_side = yes
				scope:pre_max_amount_cap > "scope:own_commander.num_mobilized_battalions"
			}
			max = {
				add = "scope:own_commander.num_mobilized_battalions"
				desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
			}
		}
		else_if = {
			limit = {
				scope:is_advancing_side = no
				scope:pre_max_amount_cap > "scope:province.land_controller_hq.num_garrison_units"
			}
			max = {
				add = "scope:province.land_controller_hq.num_garrison_units"
				desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
			}
		}
	}
	save_temporary_value_as = pre_min_amount_cap
	# If we're advancing, ensure at least 1 Battalion is doing so
	if = {
		limit = {
			scope:is_advancing_side = yes
			scope:pre_min_amount_cap < 1
		}
		min = 1
		desc = "BATTLE_SIZE_MIN_AMOUNT_REACHED"
	}
}

# Defines weights for selecting Combat Units when a land battle is created.
# Units with weight <= 0 are never selected.
# root = combat unit
# own_commander = the commander leading this side in battle (if any; could be garrison)
# province = land province this battle takes place in
# is_advancing_side = boolean indicating whether this is the advancing side of the battle
land_battle_unit_selection_weight = {
	if = {
		limit = {
			OR = {
				manpower < define:NMilitary|MIN_USABLE_MANPOWER
				morale < 0.3
			}
		}
		value = 0
	}
	else = {
		# Start with available manpower & morale.
		value = manpower
		multiply = morale
		# Add CE stats.
		# Don't differentiate between offensive / defensive battles, on purpose.
		multiply = offense
		multiply = defense
		# Take unit mobilization value into account.
		if = {
			limit = {
				exists = scope:own_commander
			}
			multiply = mobilization
		}
		# Prefer own troops instead of borrowed ones.
		if = {
			limit = {
				exists = scope:own_commander
				exists = commander
				commander = scope:own_commander
			}
			multiply = 2
		}
		# Army composition multipliers.
		# It uses weights rather than counters, so the actual composition might be different.
		# It uses a static 50% inf / 25% art / 25% cav ratio for land battles without a general.
		# Infantry
		if = {
			limit = {
				OR = {
					has_unit_type = unit_type:combat_unit_type_irregular_infantry
					has_unit_type = unit_type:combat_unit_type_line_infantry
					has_unit_type = unit_type:combat_unit_type_skirmish_infantry
					has_unit_type = unit_type:combat_unit_type_trench_infantry
					has_unit_type = unit_type:combat_unit_type_mechanized_infantry
				}
			}
			if = {
				limit = {
					exists = scope:own_commander
					exists = scope:own_commander.commander_military_formation
				}
				multiply = {
					scope:own_commander.commander_military_formation = {
						every_combat_unit = {
							if = {
								limit = {
									OR = {
										has_unit_type = unit_type:combat_unit_type_irregular_infantry
										has_unit_type = unit_type:combat_unit_type_line_infantry
										has_unit_type = unit_type:combat_unit_type_skirmish_infantry
										has_unit_type = unit_type:combat_unit_type_trench_infantry
										has_unit_type = unit_type:combat_unit_type_mechanized_infantry
									}
								}
								add = 1
							}
						}
					}
				}
			}
			else = {
				multiply = 0.5
			}
		}
		# Artillery
		else_if = {
			limit = {
				OR = {
					has_unit_type = unit_type:combat_unit_type_cannon_artillery
					has_unit_type = unit_type:combat_unit_type_mobile_artillery
					has_unit_type = unit_type:combat_unit_type_shrapnel_artillery
					has_unit_type = unit_type:combat_unit_type_siege_artillery
					has_unit_type = unit_type:combat_unit_type_motorized_artillery
				}
			}
			if = {
				limit = {
					exists = scope:own_commander
					exists = scope:own_commander.commander_military_formation
				}
				multiply = {
					scope:own_commander.commander_military_formation = {
						every_combat_unit = {
							if = {
								limit = {
									OR = {
										has_unit_type = unit_type:combat_unit_type_cannon_artillery
										has_unit_type = unit_type:combat_unit_type_mobile_artillery
										has_unit_type = unit_type:combat_unit_type_shrapnel_artillery
										has_unit_type = unit_type:combat_unit_type_siege_artillery
										has_unit_type = unit_type:combat_unit_type_motorized_artillery
									}
								}
								add = 1
							}
						}
					}
				}
			}
			else = {
				multiply = 0.25
			}
		}
		# Cavalry
		else_if = {
			limit = {
				OR = {
					has_unit_type = unit_type:combat_unit_type_irregular_cavalry
					has_unit_type = unit_type:combat_unit_type_regular_cavalry
					has_unit_type = unit_type:combat_unit_type_rifle_cavalry
					has_unit_type = unit_type:combat_unit_type_tank
					has_unit_type = unit_type:combat_unit_type_battle_tank
				}
			}
			if = {
				limit = {
					exists = scope:own_commander
					exists = scope:own_commander.commander_military_formation
				}
				multiply = {
					scope:own_commander.commander_military_formation = {
						every_combat_unit = {
							if = {
								limit = {
									OR = {
										has_unit_type = unit_type:combat_unit_type_irregular_cavalry
										has_unit_type = unit_type:combat_unit_type_regular_cavalry
										has_unit_type = unit_type:combat_unit_type_rifle_cavalry
										has_unit_type = unit_type:combat_unit_type_tank
										has_unit_type = unit_type:combat_unit_type_battle_tank
									}
								}
								add = 1
							}
						}
					}
				}
			}
			else = {
				multiply = 0.25
			}
		}
	}
}

# the flotilla size for each side in a naval battle
# root = country
# enemy_country = the other country
# own_commander = the commander leading this side in battle (if any; could be garrison)
# military_formation = the military formation in this side of the battle
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
naval_battle_size = {
	if = {
		limit = {
			exists = scope:own_commander
		}
		value = {
			value = scope:own_commander.num_units_share
			desc = "NAVAL_BATTLE_SIZE_ADMIRAL_SHARE"
		}
	}
	else = {
		if = {
			limit = {
				exists = scope:military_formation
			}
			value = {
				value = scope:military_formation.num_commanderless_units
				desc = "NAVAL_BATTLE_SIZE_NUM_COMMANDERLESS_UNITS"
			}
		}
	}
}

# Defines weights for selecting Combat Units when a naval battle is created.
# Units with weight <= 0 are never selected.
# root = combat unit
# own_commander = the commander leading this side in battle
# province = naval province this battle takes place in
# is_advancing_side = boolean indicating whether this is the attacker side of the battle.
naval_battle_unit_selection_weight = {
	if = {
		limit = {
			OR = {
				manpower < define:NMilitary|MIN_USABLE_MANPOWER
				morale < 0.3
			}
		}
		value = 0
	}
	else = {
		value = manpower
		multiply = morale
		multiply = offense
		multiply = defense
		# Fleet composition multipliers.
		# It uses weights rather than counters, so the actual composition might be different.
		# It uses a static 50% light / 35% capital / 15% support ratio for battles without a commander.
		# Light
		if = {
			limit = {
				OR = {
					has_unit_type = unit_type:combat_unit_type_frigate
					has_unit_type = unit_type:combat_unit_type_monitor
					has_unit_type = unit_type:combat_unit_type_destroyer
					has_unit_type = unit_type:combat_unit_type_scout_cruiser
				}
			}
			if = {
				limit = {
					exists = scope:own_commander
					exists = scope:own_commander.commander_military_formation
				}
				multiply = {
					scope:own_commander.commander_military_formation = {
						every_combat_unit = {
							if = {
								limit = {
									OR = {
										has_unit_type = unit_type:combat_unit_type_frigate
										has_unit_type = unit_type:combat_unit_type_monitor
										has_unit_type = unit_type:combat_unit_type_destroyer
										has_unit_type = unit_type:combat_unit_type_scout_cruiser
									}
								}
								add = 1
							}
						}
					}
				}
			}
			else = {
				multiply = 0.5
			}
		}
		# Capital
		else_if = {
			limit = {
				OR = {
					has_unit_type = unit_type:combat_unit_type_man_o_war
					has_unit_type = unit_type:combat_unit_type_ironclad
					has_unit_type = unit_type:combat_unit_type_dreadnought
					has_unit_type = unit_type:combat_unit_type_battleship
				}
			}
			if = {
				limit = {
					exists = scope:own_commander
					exists = scope:own_commander.commander_military_formation
				}
				multiply = {
					scope:own_commander.commander_military_formation = {
						every_combat_unit = {
							if = {
								limit = {
									OR = {
										has_unit_type = unit_type:combat_unit_type_man_o_war
										has_unit_type = unit_type:combat_unit_type_ironclad
										has_unit_type = unit_type:combat_unit_type_dreadnought
										has_unit_type = unit_type:combat_unit_type_battleship
									}
								}
								add = 1
							}
						}
					}
				}
			}
			else = {
				multiply = 0.35
			}
		}
		# Support
		else_if = {
			limit = {
				OR = {
					has_unit_type = unit_type:combat_unit_type_torpedo_boat
					has_unit_type = unit_type:combat_unit_type_submarine
					has_unit_type = unit_type:combat_unit_type_carrier
				}
			}
			if = {
				limit = {
					exists = scope:own_commander
					exists = scope:own_commander.commander_military_formation
				}
				multiply = {
					scope:own_commander.commander_military_formation = {
						every_combat_unit = {
							if = {
								limit = {
									OR = {
										has_unit_type = unit_type:combat_unit_type_torpedo_boat
										has_unit_type = unit_type:combat_unit_type_submarine
										has_unit_type = unit_type:combat_unit_type_carrier
									}
								}
								add = 1
							}
						}
					}
				}
			}
			else = {
				multiply = 0.15
			}
		}
	}
}

# the weight for how likely a unit is to take casualties over others
# root = combat unit
battle_unit_casualty_weight = {
	value = 1
	divide = {
		value = morale
		min = 0.01
	}
}
